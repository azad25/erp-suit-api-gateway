// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

// Authentication response
type AuthResponse struct {
	User         *User  `json:"user"`
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
	ExpiresIn    int    `json:"expiresIn"`
}

// Input for bulk creating users
type BulkCreateUsersInput struct {
	Users []*CreateUserInput `json:"users"`
}

// Bulk delete mutation response
type BulkDeleteMutationResponse struct {
	Success      bool                `json:"success"`
	Message      string              `json:"message"`
	DeletedCount int                 `json:"deletedCount"`
	FailedCount  int                 `json:"failedCount"`
	Results      []*BulkDeleteResult `json:"results"`
	Errors       []*FieldError       `json:"errors,omitempty"`
}

// Bulk delete operation result
type BulkDeleteResult struct {
	Success bool    `json:"success"`
	UserID  string  `json:"userId"`
	Error   *string `json:"error,omitempty"`
}

// Input for bulk updating users
type BulkUpdateUsersInput struct {
	Updates []*UserUpdateInput `json:"updates"`
}

// Bulk user mutation response
type BulkUserMutationResponse struct {
	Success      bool              `json:"success"`
	Message      string            `json:"message"`
	Results      []*BulkUserResult `json:"results"`
	CreatedCount *int              `json:"createdCount,omitempty"`
	UpdatedCount *int              `json:"updatedCount,omitempty"`
	FailedCount  int               `json:"failedCount"`
	Errors       []*FieldError     `json:"errors,omitempty"`
}

// Bulk user operation result
type BulkUserResult struct {
	Success bool    `json:"success"`
	User    *User   `json:"user,omitempty"`
	Error   *string `json:"error,omitempty"`
	Email   *string `json:"email,omitempty"`
}

// Input for creating an organization
type CreateOrganizationInput struct {
	Name           string `json:"name"`
	Domain         string `json:"domain"`
	AdminEmail     string `json:"adminEmail"`
	AdminPassword  string `json:"adminPassword"`
	AdminFirstName string `json:"adminFirstName"`
	AdminLastName  string `json:"adminLastName"`
}

// Input for creating a role
type CreateRoleInput struct {
	Name          string   `json:"name"`
	Description   *string  `json:"description,omitempty"`
	PermissionIds []string `json:"permissionIds,omitempty"`
}

// Input for creating a user (admin)
type CreateUserInput struct {
	Email      string   `json:"email"`
	Password   string   `json:"password"`
	FirstName  string   `json:"firstName"`
	LastName   string   `json:"lastName"`
	IsActive   *bool    `json:"isActive,omitempty"`
	IsVerified *bool    `json:"isVerified,omitempty"`
	RoleIds    []string `json:"roleIds,omitempty"`
}

// Field-specific error
type FieldError struct {
	Field   string `json:"field"`
	Message string `json:"message"`
}

// Input for user login
type LoginInput struct {
	Email      string `json:"email"`
	Password   string `json:"password"`
	RememberMe *bool  `json:"rememberMe,omitempty"`
}

// Root Mutation type
type Mutation struct {
}

// Generic response for mutations
type MutationResponse struct {
	Success bool          `json:"success"`
	Message string        `json:"message"`
	Errors  []*FieldError `json:"errors,omitempty"`
}

// User notification
type Notification struct {
	ID        string           `json:"id"`
	UserID    string           `json:"userId"`
	Type      NotificationType `json:"type"`
	Title     string           `json:"title"`
	Message   string           `json:"message"`
	Data      *string          `json:"data,omitempty"`
	Read      bool             `json:"read"`
	CreatedAt string           `json:"createdAt"`
}

// Organization represents an organization
type Organization struct {
	ID              string        `json:"id"`
	Name            string        `json:"name"`
	Domain          string        `json:"domain"`
	IsActive        bool          `json:"isActive"`
	CreatedAt       string        `json:"createdAt"`
	UpdatedAt       string        `json:"updatedAt"`
	Users           []*User       `json:"users"`
	UserCount       int           `json:"userCount"`
	ActiveUserCount int           `json:"activeUserCount"`
	Roles           []*Role       `json:"roles"`
	Permissions     []*Permission `json:"permissions"`
}

// Organization connection for pagination
type OrganizationConnection struct {
	Edges      []*OrganizationEdge `json:"edges"`
	TotalCount int                 `json:"totalCount"`
	PageInfo   *PageInfo           `json:"pageInfo"`
}

// Organization edge for pagination
type OrganizationEdge struct {
	Node   *Organization `json:"node"`
	Cursor string        `json:"cursor"`
}

// Organization mutation response
type OrganizationMutationResponse struct {
	Success      bool          `json:"success"`
	Message      string        `json:"message"`
	Organization *Organization `json:"organization,omitempty"`
	Errors       []*FieldError `json:"errors,omitempty"`
}

// Organization statistics
type OrganizationStats struct {
	TotalOrganizations      int     `json:"totalOrganizations"`
	ActiveOrganizations     int     `json:"activeOrganizations"`
	InactiveOrganizations   int     `json:"inactiveOrganizations"`
	VerifiedOrganizations   int     `json:"verifiedOrganizations"`
	UnverifiedOrganizations int     `json:"unverifiedOrganizations"`
	TotalUsers              int     `json:"totalUsers"`
	AverageUsersPerOrg      float64 `json:"averageUsersPerOrg"`
}

// Page info for pagination
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor,omitempty"`
	EndCursor       *string `json:"endCursor,omitempty"`
}

// Permission represents a system permission
type Permission struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	Resource    string  `json:"resource"`
	Action      string  `json:"action"`
	Scope       *string `json:"scope,omitempty"`
	IsSystem    bool    `json:"isSystem"`
	CreatedAt   string  `json:"createdAt"`
	UpdatedAt   string  `json:"updatedAt"`
}

// Root Query type
type Query struct {
}

// Input for user registration
type RegisterInput struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Email     string `json:"email"`
	Password  string `json:"password"`
}

// Role represents a user role
type Role struct {
	ID             string        `json:"id"`
	OrganizationID *string       `json:"organizationId,omitempty"`
	Name           string        `json:"name"`
	Description    *string       `json:"description,omitempty"`
	IsSystem       bool          `json:"isSystem"`
	IsActive       bool          `json:"isActive"`
	Permissions    []*Permission `json:"permissions"`
	CreatedAt      string        `json:"createdAt"`
	UpdatedAt      string        `json:"updatedAt"`
}

// Role mutation response
type RoleMutationResponse struct {
	Success bool          `json:"success"`
	Message string        `json:"message"`
	Role    *Role         `json:"role,omitempty"`
	Errors  []*FieldError `json:"errors,omitempty"`
}

// Security statistics
type SecurityStats struct {
	FailedLoginsToday   int `json:"failedLoginsToday"`
	LockedAccounts      int `json:"lockedAccounts"`
	SecurityAlerts      int `json:"securityAlerts"`
	TwoFactorEnabled    int `json:"twoFactorEnabled"`
	PasswordResetsToday int `json:"passwordResetsToday"`
}

// Root Subscription type for real-time updates
type Subscription struct {
}

// System announcement
type SystemAnnouncement struct {
	ID        string           `json:"id"`
	Type      AnnouncementType `json:"type"`
	Title     string           `json:"title"`
	Message   string           `json:"message"`
	Severity  Severity         `json:"severity"`
	CreatedAt string           `json:"createdAt"`
}

// Input for updating an organization
type UpdateOrganizationInput struct {
	Name     *string `json:"name,omitempty"`
	Domain   *string `json:"domain,omitempty"`
	IsActive *bool   `json:"isActive,omitempty"`
}

// Input for updating a role
type UpdateRoleInput struct {
	Name          *string  `json:"name,omitempty"`
	Description   *string  `json:"description,omitempty"`
	PermissionIds []string `json:"permissionIds,omitempty"`
}

// Input for updating a user
type UpdateUserInput struct {
	Email      *string  `json:"email,omitempty"`
	FirstName  *string  `json:"firstName,omitempty"`
	LastName   *string  `json:"lastName,omitempty"`
	IsActive   *bool    `json:"isActive,omitempty"`
	IsVerified *bool    `json:"isVerified,omitempty"`
	RoleIds    []string `json:"roleIds,omitempty"`
}

// User represents a user in the system
type User struct {
	ID              string        `json:"id"`
	OrganizationID  *string       `json:"organizationId,omitempty"`
	FirstName       string        `json:"firstName"`
	LastName        string        `json:"lastName"`
	Email           string        `json:"email"`
	EmailVerifiedAt *string       `json:"emailVerifiedAt,omitempty"`
	IsActive        bool          `json:"isActive"`
	IsVerified      bool          `json:"isVerified"`
	LastLoginAt     *string       `json:"lastLoginAt,omitempty"`
	Roles           []*Role       `json:"roles"`
	Permissions     []*Permission `json:"permissions"`
	CreatedAt       string        `json:"createdAt"`
	UpdatedAt       string        `json:"updatedAt"`
	Organization    *Organization `json:"organization,omitempty"`
}

// User activity log entry
type UserActivity struct {
	ID        string  `json:"id"`
	UserID    string  `json:"userId"`
	Action    string  `json:"action"`
	Resource  string  `json:"resource"`
	Details   *string `json:"details,omitempty"`
	IPAddress string  `json:"ipAddress"`
	UserAgent *string `json:"userAgent,omitempty"`
	CreatedAt string  `json:"createdAt"`
	User      *User   `json:"user,omitempty"`
}

// User activity connection for pagination
type UserActivityConnection struct {
	Edges      []*UserActivityEdge `json:"edges"`
	TotalCount int                 `json:"totalCount"`
	PageInfo   *PageInfo           `json:"pageInfo"`
}

// User activity edge for pagination
type UserActivityEdge struct {
	Node   *UserActivity `json:"node"`
	Cursor string        `json:"cursor"`
}

// User connection for pagination
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	TotalCount int         `json:"totalCount"`
	PageInfo   *PageInfo   `json:"pageInfo"`
}

// User edge for pagination
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor string `json:"cursor"`
}

// User mutation response
type UserMutationResponse struct {
	Success bool          `json:"success"`
	Message string        `json:"message"`
	User    *User         `json:"user,omitempty"`
	Errors  []*FieldError `json:"errors,omitempty"`
}

// Detailed role information for the current user
type UserRoleInfo struct {
	// Role type identifier: app_admin, organization_admin, or user
	RoleType string `json:"roleType"`
	// True if the user is an application admin
	IsAppAdmin bool `json:"isAppAdmin"`
	// True if the user is an organization admin
	IsOrganizationAdmin bool `json:"isOrganizationAdmin"`
	// True if the user is a regular user
	IsRegularUser bool `json:"isRegularUser"`
}

// User statistics
type UserStats struct {
	TotalUsers      int `json:"totalUsers"`
	ActiveUsers     int `json:"activeUsers"`
	InactiveUsers   int `json:"inactiveUsers"`
	VerifiedUsers   int `json:"verifiedUsers"`
	UnverifiedUsers int `json:"unverifiedUsers"`
	RecentSignups   int `json:"recentSignups"`
	RecentLogins    int `json:"recentLogins"`
}

// Input for user update in bulk operations
type UserUpdateInput struct {
	ID    string           `json:"id"`
	Input *UpdateUserInput `json:"input"`
}

// Announcement types
type AnnouncementType string

const (
	AnnouncementTypeMaintenance AnnouncementType = "MAINTENANCE"
	AnnouncementTypeUpdate      AnnouncementType = "UPDATE"
	AnnouncementTypeSecurity    AnnouncementType = "SECURITY"
	AnnouncementTypeGeneral     AnnouncementType = "GENERAL"
)

var AllAnnouncementType = []AnnouncementType{
	AnnouncementTypeMaintenance,
	AnnouncementTypeUpdate,
	AnnouncementTypeSecurity,
	AnnouncementTypeGeneral,
}

func (e AnnouncementType) IsValid() bool {
	switch e {
	case AnnouncementTypeMaintenance, AnnouncementTypeUpdate, AnnouncementTypeSecurity, AnnouncementTypeGeneral:
		return true
	}
	return false
}

func (e AnnouncementType) String() string {
	return string(e)
}

func (e *AnnouncementType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AnnouncementType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AnnouncementType", str)
	}
	return nil
}

func (e AnnouncementType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *AnnouncementType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e AnnouncementType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Notification types
type NotificationType string

const (
	NotificationTypeInfo    NotificationType = "INFO"
	NotificationTypeWarning NotificationType = "WARNING"
	NotificationTypeError   NotificationType = "ERROR"
	NotificationTypeSuccess NotificationType = "SUCCESS"
)

var AllNotificationType = []NotificationType{
	NotificationTypeInfo,
	NotificationTypeWarning,
	NotificationTypeError,
	NotificationTypeSuccess,
}

func (e NotificationType) IsValid() bool {
	switch e {
	case NotificationTypeInfo, NotificationTypeWarning, NotificationTypeError, NotificationTypeSuccess:
		return true
	}
	return false
}

func (e NotificationType) String() string {
	return string(e)
}

func (e *NotificationType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationType", str)
	}
	return nil
}

func (e NotificationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *NotificationType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e NotificationType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Severity levels
type Severity string

const (
	SeverityLow      Severity = "LOW"
	SeverityMedium   Severity = "MEDIUM"
	SeverityHigh     Severity = "HIGH"
	SeverityCritical Severity = "CRITICAL"
)

var AllSeverity = []Severity{
	SeverityLow,
	SeverityMedium,
	SeverityHigh,
	SeverityCritical,
}

func (e Severity) IsValid() bool {
	switch e {
	case SeverityLow, SeverityMedium, SeverityHigh, SeverityCritical:
		return true
	}
	return false
}

func (e Severity) String() string {
	return string(e)
}

func (e *Severity) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Severity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Severity", str)
	}
	return nil
}

func (e Severity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Severity) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Severity) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
