// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.0
// source: proto/ai.proto

package ai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AICopilotService_Chat_FullMethodName        = "/ai.AICopilotService/Chat"
	AICopilotService_StreamChat_FullMethodName  = "/ai.AICopilotService/StreamChat"
	AICopilotService_HealthCheck_FullMethodName = "/ai.AICopilotService/HealthCheck"
)

// AICopilotServiceClient is the client API for AICopilotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AI Copilot Service definition - matches erp-ai-copilot service
type AICopilotServiceClient interface {
	// Chat endpoint for processing messages
	Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
	// Stream chat for real-time responses
	StreamChat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatResponse], error)
	// Health check endpoint
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type aICopilotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAICopilotServiceClient(cc grpc.ClientConnInterface) AICopilotServiceClient {
	return &aICopilotServiceClient{cc}
}

func (c *aICopilotServiceClient) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, AICopilotService_Chat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aICopilotServiceClient) StreamChat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AICopilotService_ServiceDesc.Streams[0], AICopilotService_StreamChat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatRequest, ChatResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AICopilotService_StreamChatClient = grpc.ServerStreamingClient[ChatResponse]

func (c *aICopilotServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, AICopilotService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AICopilotServiceServer is the server API for AICopilotService service.
// All implementations must embed UnimplementedAICopilotServiceServer
// for forward compatibility.
//
// AI Copilot Service definition - matches erp-ai-copilot service
type AICopilotServiceServer interface {
	// Chat endpoint for processing messages
	Chat(context.Context, *ChatRequest) (*ChatResponse, error)
	// Stream chat for real-time responses
	StreamChat(*ChatRequest, grpc.ServerStreamingServer[ChatResponse]) error
	// Health check endpoint
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedAICopilotServiceServer()
}

// UnimplementedAICopilotServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAICopilotServiceServer struct{}

func (UnimplementedAICopilotServiceServer) Chat(context.Context, *ChatRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedAICopilotServiceServer) StreamChat(*ChatRequest, grpc.ServerStreamingServer[ChatResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamChat not implemented")
}
func (UnimplementedAICopilotServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedAICopilotServiceServer) mustEmbedUnimplementedAICopilotServiceServer() {}
func (UnimplementedAICopilotServiceServer) testEmbeddedByValue()                          {}

// UnsafeAICopilotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AICopilotServiceServer will
// result in compilation errors.
type UnsafeAICopilotServiceServer interface {
	mustEmbedUnimplementedAICopilotServiceServer()
}

func RegisterAICopilotServiceServer(s grpc.ServiceRegistrar, srv AICopilotServiceServer) {
	// If the following call pancis, it indicates UnimplementedAICopilotServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AICopilotService_ServiceDesc, srv)
}

func _AICopilotService_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AICopilotServiceServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AICopilotService_Chat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AICopilotServiceServer).Chat(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AICopilotService_StreamChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AICopilotServiceServer).StreamChat(m, &grpc.GenericServerStream[ChatRequest, ChatResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AICopilotService_StreamChatServer = grpc.ServerStreamingServer[ChatResponse]

func _AICopilotService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AICopilotServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AICopilotService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AICopilotServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AICopilotService_ServiceDesc is the grpc.ServiceDesc for AICopilotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AICopilotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.AICopilotService",
	HandlerType: (*AICopilotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Chat",
			Handler:    _AICopilotService_Chat_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _AICopilotService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamChat",
			Handler:       _AICopilotService_StreamChat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/ai.proto",
}
