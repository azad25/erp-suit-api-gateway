// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

// Authentication response
type AuthResponse struct {
	User         *User  `json:"user"`
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
	ExpiresIn    int    `json:"expiresIn"`
}

// Field-specific error
type FieldError struct {
	Field   string `json:"field"`
	Message string `json:"message"`
}

// Input for user login
type LoginInput struct {
	Email      string `json:"email"`
	Password   string `json:"password"`
	RememberMe *bool  `json:"rememberMe,omitempty"`
}

// Root Mutation type
type Mutation struct {
}

// Generic response for mutations
type MutationResponse struct {
	Success bool          `json:"success"`
	Message string        `json:"message"`
	Errors  []*FieldError `json:"errors,omitempty"`
}

// User notification
type Notification struct {
	ID        string           `json:"id"`
	UserID    string           `json:"userId"`
	Type      NotificationType `json:"type"`
	Title     string           `json:"title"`
	Message   string           `json:"message"`
	Data      *string          `json:"data,omitempty"`
	Read      bool             `json:"read"`
	CreatedAt string           `json:"createdAt"`
}

// Permission represents a system permission
type Permission struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	Resource    string  `json:"resource"`
	Action      string  `json:"action"`
}

// Root Query type
type Query struct {
}

// Input for user registration
type RegisterInput struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Email     string `json:"email"`
	Password  string `json:"password"`
}

// Role represents a user role
type Role struct {
	ID          string        `json:"id"`
	Name        string        `json:"name"`
	Description *string       `json:"description,omitempty"`
	Permissions []*Permission `json:"permissions"`
}

// Root Subscription type for real-time updates
type Subscription struct {
}

// System announcement
type SystemAnnouncement struct {
	ID        string           `json:"id"`
	Type      AnnouncementType `json:"type"`
	Title     string           `json:"title"`
	Message   string           `json:"message"`
	Severity  Severity         `json:"severity"`
	CreatedAt string           `json:"createdAt"`
}

// User represents a user in the system
type User struct {
	ID              string        `json:"id"`
	FirstName       string        `json:"firstName"`
	LastName        string        `json:"lastName"`
	Email           string        `json:"email"`
	EmailVerifiedAt *string       `json:"emailVerifiedAt,omitempty"`
	Roles           []*Role       `json:"roles"`
	Permissions     []*Permission `json:"permissions"`
	CreatedAt       string        `json:"createdAt"`
	UpdatedAt       string        `json:"updatedAt"`
}

// Announcement types
type AnnouncementType string

const (
	AnnouncementTypeMaintenance AnnouncementType = "MAINTENANCE"
	AnnouncementTypeUpdate      AnnouncementType = "UPDATE"
	AnnouncementTypeSecurity    AnnouncementType = "SECURITY"
	AnnouncementTypeGeneral     AnnouncementType = "GENERAL"
)

var AllAnnouncementType = []AnnouncementType{
	AnnouncementTypeMaintenance,
	AnnouncementTypeUpdate,
	AnnouncementTypeSecurity,
	AnnouncementTypeGeneral,
}

func (e AnnouncementType) IsValid() bool {
	switch e {
	case AnnouncementTypeMaintenance, AnnouncementTypeUpdate, AnnouncementTypeSecurity, AnnouncementTypeGeneral:
		return true
	}
	return false
}

func (e AnnouncementType) String() string {
	return string(e)
}

func (e *AnnouncementType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AnnouncementType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AnnouncementType", str)
	}
	return nil
}

func (e AnnouncementType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *AnnouncementType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e AnnouncementType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Notification types
type NotificationType string

const (
	NotificationTypeInfo    NotificationType = "INFO"
	NotificationTypeWarning NotificationType = "WARNING"
	NotificationTypeError   NotificationType = "ERROR"
	NotificationTypeSuccess NotificationType = "SUCCESS"
)

var AllNotificationType = []NotificationType{
	NotificationTypeInfo,
	NotificationTypeWarning,
	NotificationTypeError,
	NotificationTypeSuccess,
}

func (e NotificationType) IsValid() bool {
	switch e {
	case NotificationTypeInfo, NotificationTypeWarning, NotificationTypeError, NotificationTypeSuccess:
		return true
	}
	return false
}

func (e NotificationType) String() string {
	return string(e)
}

func (e *NotificationType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationType", str)
	}
	return nil
}

func (e NotificationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *NotificationType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e NotificationType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Severity levels
type Severity string

const (
	SeverityLow      Severity = "LOW"
	SeverityMedium   Severity = "MEDIUM"
	SeverityHigh     Severity = "HIGH"
	SeverityCritical Severity = "CRITICAL"
)

var AllSeverity = []Severity{
	SeverityLow,
	SeverityMedium,
	SeverityHigh,
	SeverityCritical,
}

func (e Severity) IsValid() bool {
	switch e {
	case SeverityLow, SeverityMedium, SeverityHigh, SeverityCritical:
		return true
	}
	return false
}

func (e Severity) String() string {
	return string(e)
}

func (e *Severity) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Severity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Severity", str)
	}
	return nil
}

func (e Severity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Severity) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Severity) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
